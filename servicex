#!/usr/bin/env python3

from twisted.words.protocols import irc
from twisted.internet import reactor, protocol
from datetime import datetime
from sqlite3 import connect, Error
from os.path import isfile


def timestamp(dt=None):
    now = datetime.now()

    if dt is None:
        return now.strftime("%Y-%m-%d_%H:%M:%S")

    if dt == "date":
        return now.strftime("%Y-%m-%d")

    if dt == "time":
        return now.strftime("%H:%M:%S")


def log(type, entry):
    if type in ('info', 'warning', 'error'):
        print("%s:%s: %s" % (timestamp(), type, entry))


def databaseConnect(databaseFile):
    conn = None
    try:
        conn = connect(databaseFile)
        return conn
    except Error as e:
        log('error', e)

    return conn


class ServiceXProtocol(irc.IRCClient):
    versionEnv = ""
    versionName = "ServiceX"
    versionNum = ""

    def __init__(self):
        super().__init__()
        self.nickname = nickname
        self.username = ident
        self.realname = realname
        self.channels = []

    def command_join(self, target, channelName, nickname):
        self.joinChannel(channelName)

    def command_part(self, target, channelName, nickname):
        self.partChannel(channelName)

    def command_cycle(self, target, channelName, nickname):
        self.partChannel(channelName)
        self.joinChannel(channelName)

    def command_ping(self, target, message, nickname):
        self.reply(target, "pong!", nickname)

    def command_date(self, target, message, nickname):
        self.reply(target, timestamp("date"), nickname)

    def command_time(self, target, message, nickname):
        self.reply(target, timestamp("time"), nickname)

    def connectionMade(self):
        irc.IRCClient.connectionMade(self)
        log("info", "Successfully made connection with %s (%s:%s)." % (
            self.factory.networkName, self.factory.networkAddress, self.factory.networkPort))

    def connectionLost(self, reason):
        irc.IRCClient.connectionLost(self, reason)
        log("warning", "Connection with %s (%s:%s) has been lost." % (
            self.factory.networkName, self.factory.networkAddress, self.factory.networkPort))
        if reactor.running:
            reactor.stop()

    def signedOn(self):
        log("info", "Attempting to identify with NickServ as user '%s'." %
            self.factory.nickservUsername)

        self.msg(
            'NickServ',
            'IDENTIFY %s %s' %
            (self.factory.nickservUsername, self.factory.nickservPassword))

        databaseCursor.execute('SELECT channelName FROM ircChannels WHERE networkID=?', (self.factory.networkID, ))
        channels = databaseCursor.fetchall()

        for channel in channels:
            self.joinChannel(channel[0])

    def joined(self, channelName):
        log("info", "Successfully joined channel '%s'." % channelName)

    def parted(self, channelName):
        log("info", "Successfully parted channel '%s'." % channelName)

    def joinChannel(self, channelName):
        channelName = channelName.split()[0]

        if channelName in self.channels:
            log("info", "Already in channel '%s'." % channelName)
        else:
            log("info", "Attempting to join channel '%s'." % channelName)
            self.join(channelName)
            self.channels.append(channelName)

            databaseCursor.execute('SELECT * FROM ircChannels WHERE channelName=? AND networkID=?', (channelName, self.factory.networkID))
            channel = databaseCursor.fetchone()

            if channel is None:
                log("info", "Attempting to add channel '%s' to the database." % channelName)
                query = """INSERT INTO ircChannels (networkID, channelName) VALUES (?, ?)"""
                databaseCursor.execute(query, (self.factory.networkID, channelName))
                databaseConnection.commit()
            else:
                log("info", "Channel '%s' already exists in the database." % channelName)

    def partChannel(self, channelName):
        channelName = channelName.split()[0]

        if channelName in self.channels:
            log("info", "Attempting to part channel '%s'." % channelName)
            self.part(channelName)
            self.channels.remove(channelName)

            databaseCursor.execute('SELECT * FROM ircChannels WHERE channelName=? AND networkID=?', (channelName, self.factory.networkID))
            channel = databaseCursor.fetchone()

            if channel is not None:
                log("info", "Attempting to remove channel '%s' from the database." % channelName)
                query = """DELETE FROM ircChannels WHERE channelName=? AND networkID=?"""
                databaseCursor.execute(query, (channelName, self.factory.networkID))
                databaseConnection.commit()
        else:
            log("info", "Not in channel '%s'." % channelName)


    def reply(self, replyTarget, replyMessage, replyNickname=None):
        if replyNickname is None:
            self.msg(replyTarget, "%s: %s" % (replyTarget, replyMessage))
        else:
            self.msg(replyTarget, "%s: %s" % (replyNickname, replyMessage))

    def privmsg(self, fromString, fromTarget, fromMessage):
        fromNickname, fromString = fromString.split('!')
        fromIdent, fromHostname = fromString.split('@')
        fromMessage = fromMessage.strip()
        fromCommand = fromMessage.split()[0]
        fromMessage = ' '.join(fromMessage.split()[1:])
        function = None

        if fromTarget == self.nickname:
            try:
                function = getattr(self, 'command_%s' % fromCommand)
            except AttributeError:
                log("info", "Command '%s' sent by '%s!%s@%s' via PM was not found." %
                    (fromCommand, fromNickname, fromIdent, fromHostname))
                self.reply(fromNickname, "Command not found.", fromNickname)
                return

            log("info", "Command '%s' sent by '%s!%s@%s' via PM was found." %
                (fromCommand, fromNickname, fromIdent, fromHostname))
            function(fromNickname, fromMessage, fromNickname)

        if fromCommand.startswith(self.factory.commandTrigger):
            fromCommand = fromCommand.lstrip(self.factory.commandTrigger)

            try:
                function = getattr(self, 'command_%s' % fromCommand)
            except AttributeError:
                log("info", "Command '%s' sent by '%s!%s@%s' via channel '%s' was not found." %
                    (fromCommand, fromNickname, fromIdent, fromHostname, fromTarget))
                self.reply(fromTarget, "Command not found.", fromNickname)
                return

            log("info", "Command '%s' sent by '%s!%s@%s' via channel '%s' was found." %
                (fromCommand, fromNickname, fromIdent, fromHostname, fromTarget))
            function(fromTarget, fromMessage, fromNickname)

        if function is None:
            return

    def action(self, user, channel, msg):
        user = user.split('!', 1)[0]
        log("* %s %s" % (user, msg))

    def noticed(self, user, channel, msg):
        if user == "NickServ!services@services.":
            if msg == "Password accepted - you are now recognized.":
                log("info", "Successfully identified with NickServ.")

            if "isn't registered." in msg:
                log("info", "Failed to identify with NickServ.")

    def irc_NICK(self, prefix, params):
        oldNick = prefix.split('!')[0]
        newNick = params[0]
        self.logger.log("'%s' is now known as '%s'" % (oldNick, newNick))

    def alterCollidedNick(self, nickname):
        return nickname + '_'


class ServiceXFactory(protocol.ClientFactory):
    def __init__(
            self,
            networkID,
            networkName,
            networkAddress,
            networkPort,
            nickname,
            ident,
            realname,
            nickservUsername,
            nickservPassword,
            operUsername,
            operPassword,
            commandTrigger):
        self.networkID = networkID
        self.networkName = networkName
        self.networkAddress = networkAddress
        self.networkPort = networkPort
        self.nickname = nickname
        self.ident = ident
        self.realname = realname
        self.nickservUsername = nickservUsername
        self.nickservPassword = nickservPassword
        self.operUsername = operUsername
        self.operPassword = operPassword
        self.commandTrigger = commandTrigger

    def buildProtocol(self, addr):
        proto = ServiceXProtocol()
        proto.factory = self
        return proto

    def clientConnectionLost(self, connector, reason):
        connector.connect()


if __name__ == '__main__':
    log("info", "ServiceX starting up...")
    if isfile('servicex.db'):
        log("info", "Attempting to load database file 'servicex.db'.")
    else:
        log("error", "Database file does not exist. Are you sure you ran 'servicex-setup' first?")
        exit()

    databaseConnection = databaseConnect("servicex.db")
    databaseCursor = databaseConnection.cursor()

    databaseCursor.execute('SELECT * FROM ircNetworks')
    networks = databaseCursor.fetchall()

    for network in networks:
        networkID, networkName, networkAddress, networkPort, nickname, ident, realname, nickservUsername, nickservPassword, operUsername, operPassword, commandTrigger = network

        factory = ServiceXFactory(
            networkID,
            networkName,
            networkAddress,
            networkPort,
            nickname,
            ident,
            realname,
            nickservUsername,
            nickservPassword,
            operUsername,
            operPassword,
            commandTrigger)

        reactor.connectTCP(
            networkAddress,
            networkPort,
            factory)

    reactor.run()
