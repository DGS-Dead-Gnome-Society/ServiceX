#!/usr/bin/env python3

from twisted.words.protocols import irc
from twisted.internet import reactor, protocol
from datetime import datetime
from sqlite3 import connect, Error
from os.path import isfile
from importlib.util import spec_from_file_location, module_from_spec
from shlex import split
from tabulate import tabulate
from inspect import stack, getmodule


# Create a timestamp
def timestamp(dt=None):
    now = datetime.now()

    if dt is None:
        return now.strftime("%Y-%m-%d_%H:%M:%S")

    if dt == "date":
        return now.strftime("%Y-%m-%d")

    if dt == "time":
        return now.strftime("%H:%M:%S")


# Message logger (stdout and file)
def log(type, entry):
    if type in ('info', 'warning', 'error'):
        str = "%s:%s: %s" % (timestamp(), type, entry)
        with open("logs/%s.log" % timestamp("date"), "a") as logFile:
            logFile.write("%s\n" % str)
            print(str)


# Used to connect to the database
def databaseConnect(databaseFile):
    conn = None
    try:
        conn = connect(databaseFile)
        return conn
    except Error as e:
        log('error', e)

    return conn


# Used to create a table in the database
def tableCreate(databaseTable):
    databaseConnection = databaseConnect("servicex.log")
    try:
        databaseCursor = databaseConnection.cursor()
        databaseCursor.execute(databaseTable)
    except Error as e:
        print(e)


class ServiceXProtocol(irc.IRCClient):
    versionEnv = ""
    versionName = "ServiceX"
    versionNum = ""

    def __init__(self):
        super().__init__()
        self.nickname = nickname
        self.username = ident
        self.realname = realname
        self.channels = []
        self.timestamp = timestamp
        self.tableCreate = tableCreate
        self.variables = ['date', 'time']
        self.modules = []

    def variable_date(self):
        return self.timestamp("date")

    def variable_time(self):
        return self.timestamp("time")

    # Used to parse variables and replace them with data
    def variableParse(self, string):
        for variableName in self.variables:
            if "$" + variableName in string:
                try:
                    variableFunction = getattr(self, 'variable_%s' % variableName)
                    variable = variableFunction()
                except AttributeError:
                    raise
                    variable = " "

                string = string.replace("$" + variableName, variable)

        return string

    # Construct a dataframe to be sent for passing to self.msgSend()
    def frameData(self, headers, rows):
        dataframe = ""
        count = 0

        # This is an En Quad character and not a standard space
        headers = ['â€€'] + headers

        rowsModified = []

        for row in rows:
            row = [count] + row
            count += 1
            rowsModified.append(row)

        rows = tabulate(
            rowsModified,
            headers=headers,
            tablefmt="plain").split('\n')

        for row in rows:
            row = row.lstrip("  ") + "\\n"
            dataframe += row

        return dataframe.rstrip("\\n")

    # Called upon connection made
    def connectionMade(self):
        modules = ['utilities', 'channel', 'fun', 'test']

        for module in modules:
            self.loadModule(module)

        irc.IRCClient.connectionMade(self)
        log("info", "Successfully made connection with %s (%s:%s)." % (
            self.factory.networkName, self.factory.networkAddress, self.factory.networkPort))

    # Called upon connection lost
    def connectionLost(self, reason):
        irc.IRCClient.connectionLost(self, reason)
        log("warning", "Connection with %s (%s:%s) has been lost." % (
            self.factory.networkName, self.factory.networkAddress, self.factory.networkPort))
        if reactor.running:
            reactor.stop()

    # Called after server has processed the USER and NICK messages and
    # returned a response
    def signedOn(self):
        log("info", "Attempting to identify with NickServ as user '%s'." %
            self.factory.nickservUsername)

        self.msg(
            'NickServ',
            'IDENTIFY %s %s' %
            (self.factory.nickservUsername, self.factory.nickservPassword))

        databaseCursor.execute(
            'SELECT channelName FROM ircChannels WHERE networkID=?',
            (self.factory.networkID,
             ))
        channels = databaseCursor.fetchall()

        for channel in channels:
            self.chanJoin(channel[0])

    # Called upon successful join to a channel
    def joined(self, channelName):
        log("info", "Successfully joined channel '%s'." % channelName)

    # Called upon successful part from a channel
    def parted(self, channelName):
        log("info", "Successfully parted channel '%s'." % channelName)

    # Used to join channel and add to database
    def chanJoin(self, channelName, target=None, queryDatabase=True):
        if not channelName:
            channelName = target
        else:
            channelName = channelName.split()[0]

        if channelName in self.channels:
            log("info", "Already in channel '%s'." % channelName)
        else:
            log("info", "Attempting to join channel '%s'." % channelName)
            self.join(channelName)
            self.channels.append(channelName)

            if queryDatabase is True:
                databaseCursor.execute(
                    'SELECT * FROM ircChannels WHERE channelName=? AND networkID=?',
                    (channelName,
                     self.factory.networkID))
                channel = databaseCursor.fetchone()

                if channel is None:
                    log("info", "Attempting to add channel '%s' to the database." %
                        channelName)
                    query = """INSERT INTO ircChannels (networkID, channelName) VALUES (?, ?)"""
                    databaseCursor.execute(
                        query, (self.factory.networkID, channelName))
                    databaseConnection.commit()
                else:
                    log("info", "Channel '%s' already exists in the database." %
                        channelName)

    # Used to part channel and remove from database
    def chanPart(self, channelName, target, queryDatabase=True):
        if not channelName:
            channelName = target
        else:
            channelName = channelName.split()[0]

        if channelName in self.channels:
            log("info", "Attempting to part channel '%s'." % channelName)
            self.part(channelName)
            self.channels.remove(channelName)

            if queryDatabase is True:
                databaseCursor.execute(
                    'SELECT * FROM ircChannels WHERE channelName=? AND networkID=?',
                    (channelName,
                     self.factory.networkID))
                channel = databaseCursor.fetchone()

                if channel is not None:
                    log("info", "Attempting to remove channel '%s' from the database." % channelName)
                    query = """DELETE FROM ircChannels WHERE channelName=? AND networkID=?"""
                    databaseCursor.execute(
                        query, (channelName, self.factory.networkID))
                    databaseConnection.commit()
        else:
            log("info", "Not in channel '%s'." % channelName)

    # Used to send message to a user or in a channel
    def msgSend(self, msgSendTarget, msgSendNickname, msgSendMessage):
        strings = str(msgSendMessage).split('\\n')

        if msgSendNickname is None:
            target = msgSendTarget
        else:
            target = msgSendNickname

        for string in strings:
            if "\\t" in string:
                tabs = 4
                string = string.replace("\\t", " " * tabs)
            self.msg(msgSendTarget, "%s: %s" % (target, string))

    def callCommand(self, command, arguments):
        function = None

        for module in self.modules:
            for moduleAttribute in dir(module):
                if moduleAttribute == "command_" + command:
                    function = getattr(module, "command_" + command)

        if function is None:
            return False
        else:
            function(self, arguments)

    # Used to call a module
    def callModule(self, moduleName, moduleTuple):
        for module in self.modules:
            if module.__name__ == moduleName:
                module.run(self, moduleTuple)

    # Used to unload a module
    def unloadModule(self, moduleName):
        for module in self.modules:
            if module.__name__ == moduleName:
                self.modules.remove(module)

    # Used to load a module
    def loadModule(self, moduleName):
        if moduleName not in self.modules:
            moduleSpec = spec_from_file_location(moduleName, "modules/%s.py" % moduleName)
            module = module_from_spec(moduleSpec)
            moduleSpec.loader.exec_module(module)
            self.modules.append(module)

    # Used upon receiving a PRIVMSG message from the server
    def privmsg(self, fromString, fromTarget, fromMessage):
        fromNickname, fromString = fromString.split('!')
        fromIdent, fromHostname = fromString.split('@')
        fromMessage = fromMessage.strip()

        try:
            fromCommand = fromMessage.split()[0]
        except IndexError:
            return

        fromMessage = split(fromMessage)[1:]

        # The two if statements are for command interpretation and loading modules
        if fromTarget == self.nickname:
            command = self.callCommand(fromCommand, (fromNickname, fromNickname, fromMessage))

            if command is False:
                log("info", "Command '%s' sent by '%s!%s@%s' via PM was not found." %
                    (fromCommand, fromNickname, fromIdent, fromHostname))
                self.msgSend(fromNickname, fromNickname, "Command not found.")
                return

            log("info", "Command '%s' sent by '%s!%s@%s' via PM was found." %
                (fromCommand, fromNickname, fromIdent, fromHostname))

        if fromCommand.startswith(self.factory.commandTrigger):
            fromCommand = fromCommand.lstrip(self.factory.commandTrigger)
            command = self.callCommand(fromCommand, (fromTarget, fromNickname, fromMessage))

            if command is False:
                log("info", "Command '%s' sent by '%s!%s@%s' via channel '%s' was not found." %
                    (fromCommand, fromNickname, fromIdent, fromHostname, fromTarget))
                self.msgSend(fromTarget, fromNickname, "Command not found.")
                return

            log("info", "Command '%s' sent by '%s!%s@%s' via channel '%s' was found." %
                (fromCommand, fromNickname, fromIdent, fromHostname, fromTarget))

    # Used upon receiving a NOTICE message from the server
    def noticed(self, user, channel, msg):
        if user == "NickServ!services@services.":
            if msg == "Password accepted - you are now recognized.":
                log("info", "Successfully identified with NickServ.")

            if "isn't registered." in msg:
                log("info", "Failed to identify with NickServ.")

    # Used upon nicname collision
    def alterCollidedNick(self, nickname):
        return nickname + '_'


class ServiceXFactory(protocol.ClientFactory):
    def __init__(
            self,
            networkID,
            networkName,
            networkAddress,
            networkPort,
            nickname,
            ident,
            realname,
            nickservUsername,
            nickservPassword,
            operUsername,
            operPassword,
            commandTrigger):
        self.networkID = networkID
        self.networkName = networkName
        self.networkAddress = networkAddress
        self.networkPort = networkPort
        self.nickname = nickname
        self.ident = ident
        self.realname = realname
        self.nickservUsername = nickservUsername
        self.nickservPassword = nickservPassword
        self.operUsername = operUsername
        self.operPassword = operPassword
        self.commandTrigger = commandTrigger

    def buildProtocol(self, addr):
        proto = ServiceXProtocol()
        proto.factory = self
        return proto

    def clientConnectionLost(self, connector, reason):
        connector.connect()


if __name__ == '__main__':
    log("info", "ServiceX starting up...")

    # Check if database file exists or not, exit program if doesn't
    if isfile('servicex.db'):
        log("info", "Checking if database file 'servicex.db' exists.")
    else:
        log("error", "Database file does not exist. Are you sure you ran 'servicex-setup' first?")
        exit()

    # Attempt to connect to database and set cursor
    try:
        log("info", "Attempting to connect to the database.")
        databaseConnection = databaseConnect("servicex.db")
        databaseCursor = databaseConnection.cursor()
    except BaseException:
        raise

    # Get all data from the ircNetworks table
    databaseCursor.execute('SELECT * FROM ircNetworks')
    networks = databaseCursor.fetchall()

    # Create a factory and reactor per network in the ircNetworks table
    for network in networks:
        networkID, networkName, networkAddress, networkPort, nickname, ident, realname, nickservUsername, nickservPassword, operUsername, operPassword, commandTrigger = network

        factory = ServiceXFactory(
            networkID,
            networkName,
            networkAddress,
            networkPort,
            nickname,
            ident,
            realname,
            nickservUsername,
            nickservPassword,
            operUsername,
            operPassword,
            commandTrigger)

        reactor.connectTCP(
            networkAddress,
            networkPort,
            factory)

    reactor.run()
