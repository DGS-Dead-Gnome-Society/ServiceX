#!/usr/bin/env python3

from twisted.words.protocols import irc
from twisted.internet import reactor, protocol
from twisted.python import log
from datetime import datetime
from sys import stdout
from sqlite3 import connect, Error
from os.path import isfile


def timestamp(dt=None):
    now = datetime.now()

    if dt is None:
        return now.strftime("%Y-%m-%d_%H:%M:%S")

    if dt == "date":
        return now.strftime("%Y-%m-%d")

    if dt == "time":
        return now.strftime("%H:%M:%S")


def databaseConnect(databaseFile):
    conn = None
    try:
        conn = connect(databaseFile)
        return conn
    except Error as e:
        print(e)

    return conn


class MessageLogger:
    def __init__(self, file):
        self.file = file

    def log(self, message):
        self.file.write('%s %s\n' % (timestamp(), message))
        self.file.flush()

    def close(self):
        self.file.close()


class ServiceXProtocol(irc.IRCClient):
    versionEnv = ""
    versionName = "ServiceX"
    versionNum = ""

    def __init__(self):
        super().__init__()
        self.nickname = nickname
        self.username = ident
        self.realname = realname

    def command_ping(self, target, message):
        self.msg(target, "pong!")

    def command_date(self, target, message):
        self.msg(target, timestamp("date"))

    def command_time(self, target, message):
        self.msg(target, timestamp("time"))

    def connectionMade(self):
        irc.IRCClient.connectionMade(self)
        self.logger = MessageLogger(open(self.factory.filename, "a"))
        str = "Successfully made connection with %s (%s:%s)." % (self.factory.networkName, self.factory.networkAddress, self.factory.networkPort)
        print(str)
        self.logger.log(str)

    def connectionLost(self, reason):
        irc.IRCClient.connectionLost(self, reason)
        str = "Connection with %s (%s:%s) has been lost." % (self.factory.networkName, self.factory.networkAddress, self.factory.networkPort)
        print(str)
        self.logger.log(str)
        if reactor.running:
            reactor.stop()

    def signedOn(self):
        str = "Attempting to identify with NickServ as user '%s'." % self.factory.nickservUsername
        print(str)
        self.logger.log(str)

        self.msg(
            'NickServ',
            'IDENTIFY %s %s' %
            (self.factory.nickservUsername, self.factory.nickservPassword))

        databaseCursor.execute(
            'SELECT * FROM ircChannels WHERE networkID=?', (self.factory.networkID, ))

        channels = databaseCursor.fetchall()

        for channel in channels:
            channelID, networkID, channelName = channel
            str = "Attempting to join channel '%s'." % channelName
            print(str)
            self.logger.log(str)
            self.join(channelName)

    def joined(self, channel):
        str = "Successfully joined channel '%s'." % channel
        print(str)
        self.logger.log(str)

    def privmsg(self, fromString, fromTarget, fromMessage):
        fromNickname, fromString = fromString.split('!')
        fromIdent, fromHostname = fromString.split('@')
        fromMessage = fromMessage.strip()
        fromCommand = fromMessage.split()[0]
        fromMessage = ' '.join(fromMessage.split()[1:])
        function = None

        if fromTarget == self.nickname:
            try:
                function = getattr(self, 'command_%s' % fromCommand)
            except AttributeError:
                str = "Command '%s' sent by '%s!%s@%s' via PM was not found." % (
                    fromCommand, fromNickname, fromIdent, fromHostname)
                print(str)
                self.logger.log(str)
                self.msg(fromNickname, "Command not found")
                return

            str = "Command '%s' sent by '%s!%s@%s' via PM was found." % (
                fromCommand, fromNickname, fromIdent, fromHostname)
            print(str)
            self.logger.log(str)
            function(fromNickname, fromMessage)

        if fromCommand.startswith("!"):
            fromCommand = fromCommand.lstrip('!')

            try:
                function = getattr(self, 'command_%s' % fromCommand)
            except AttributeError:
                str = "Command '%s' sent by '%s!%s@%s' via channel '%s' was not found." % (
                    fromCommand, fromNickname, fromIdent, fromHostname, fromTarget)
                print(str)
                self.logger.log(str)
                self.msg(fromTarget, "Command not found")
                return

            str = "Command '%s' sent by '%s!%s@%s' via channel '%s' was found." % (
                fromCommand, fromNickname, fromIdent, fromHostname, fromTarget)
            print(str)
            self.logger.log(str)
            function(fromTarget, fromMessage)

        if function is None:
            return

    def action(self, user, channel, msg):
        user = user.split('!', 1)[0]
        self.logger.log("* %s %s" % (user, msg))

    def noticed(self, user, channel, msg):
        if user == "NickServ!services@services.":
            if msg == "Password accepted - you are now recognized.":
                str = "Successfully identified with NickServ."
                print(str)
                self.logger.log(str)

            if "isn't registered." in msg:
                str = "Failed to identify with NickServ."
                print(str)
                self.logger.log(str)

    def irc_NICK(self, prefix, params):
        oldNick = prefix.split('!')[0]
        newNick = params[0]
        self.logger.log("'%s' is now known as '%s'" % (oldNick, newNick))

    def alterCollidedNick(self, nickname):
        return nickname + '_'


class ServiceXFactory(protocol.ClientFactory):
    def __init__(
            self,
            filename,
            networkID,
            networkName,
            networkAddress,
            networkPort,
            nickname,
            ident,
            realname,
            nickservUsername,
            nickservPassword,
            operUsername,
            operPassword):
        self.filename = filename
        self.networkID = networkID
        self.networkName = networkName
        self.networkAddress = networkAddress
        self.networkPort = networkPort
        self.nickname = nickname
        self.ident = ident
        self.realname = realname
        self.nickservUsername = nickservUsername
        self.nickservPassword = nickservPassword
        self.operUsername = operUsername
        self.operPassword = operPassword

    def buildProtocol(self, addr):
        proto = ServiceXProtocol()
        proto.factory = self
        return proto

    def clientConnectionLost(self, connector, reason):
        connector.connect()


if __name__ == '__main__':
    log.startLogging(stdout)
    if isfile('servicex.db'):
        print("Attempting to load database file 'servicex.db'.")
    else:
        exit("Database file does not exist. Are you sure you ran 'servicex-setup' first?")

    databaseConnection = databaseConnect("servicex.db")
    databaseCursor = databaseConnection.cursor()

    databaseCursor.execute('SELECT * FROM ircNetworks')
    networks = databaseCursor.fetchall()

    for network in networks:
        networkID, networkName, networkAddress, networkPort, nickname, ident, realname, nickservUsername, nickservPassword, operUsername, operPassword = network

        factory = ServiceXFactory(
            "servicex.log",
            networkID,
            networkName,
            networkAddress,
            networkPort,
            nickname,
            ident,
            realname,
            nickservUsername,
            nickservPassword,
            operUsername,
            operPassword)

        reactor.connectTCP(
            networkAddress,
            networkPort,
            factory)

    reactor.run()
