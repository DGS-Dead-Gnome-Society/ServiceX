#!/usr/bin/env python3

from twisted.words.protocols import irc
from twisted.internet import reactor, protocol
from twisted.python import log
from datetime import datetime
from sys import stdout

def timestamp(dt=None):
    now = datetime.now()

    if dt is None:
        return now.strftime("%Y-%m-%d_%H:%M:%S")

    if dt == "date":
        return now.strftime("%Y-%m-%d")

    if dt == "time":
        return now.strftime("%H:%M:%S")

class MessageLogger:
    def __init__(self, file):
        self.file = file

    def log(self, message):
        self.file.write('%s %s\n' % (timestamp(), message))
        self.file.flush()

    def close(self):
        self.file.close()


class ServiceXProtocol(irc.IRCClient):
    nickname = "X"
    username = "X"
    realname = "ServiceX pseudo-services"
    versionEnv = "test"
    versionName = "ServiceX"
    versionNum = "1.0"

    def command_ping(self, target, message):
        self.msg(target, "pong!")

    def command_date(self, target, message):
        self.msg(target, timestamp("date"))

    def command_time(self, target, message):
        self.msg(target, timestamp("time"))

    def connectionMade(self):
        irc.IRCClient.connectionMade(self)
        self.logger = MessageLogger(open(self.factory.filename, "a"))
        self.logger.log("connected at %s" % timestamp())

    def connectionLost(self, reason):
        irc.IRCClient.connectionLost(self, reason)
        self.logger.log("disconnected at %s" % timestamp())
        self.logger.close()

    def signedOn(self):
        str = "Attempting to identify with NickServ as user '%s'." % self.username
        print(str)
        self.logger.log(str)
        self.msg('NickServ', 'IDENTIFY foo bar')
        channels = ['#DGS-Bots', '##DGS-Bots']
        for channel in channels:
            self.join(channel)

    def joined(self, channel):
        str = "I have joined channel '%s'." % channel
        print(str)
        self.logger.log(str)

    def privmsg(self, fromString, fromTarget, fromMessage):
        fromNickname, fromString = fromString.split('!')
        fromIdent, fromHostname = fromString.split('@')
        fromMessage = fromMessage.strip()
        fromCommand = fromMessage.split()[0]
        fromMessage = ' '.join(fromMessage.split()[1:])
        function = None

        if fromTarget == self.nickname:
            try:
                function = getattr(self, 'command_%s' % fromCommand)
            except AttributeError:
                str = "Command '%s' sent by '%s!%s@%s' via PM was not found." % (fromCommand, fromNickname, fromIdent, fromHostname)
                print(str)
                self.logger.log(str)
                self.msg(fromNickname, "Command not found")
                return

            str = "Command '%s' sent by '%s!%s@%s' via PM was found." % (fromCommand, fromNickname, fromIdent, fromHostname)
            print(str)
            self.logger.log(str)
            function(fromNickname, fromMessage)

        if fromCommand.startswith("!"):
            fromCommand = fromCommand.lstrip('!')

            try:
                function = getattr(self, 'command_%s' % fromCommand)
            except AttributeError:
                str = "Command '%s' sent by '%s!%s@%s' via channel '%s' was not found." % (fromCommand, fromNickname, fromIdent, fromHostname, fromTarget)
                print(str)
                self.logger.log(str)
                self.msg(fromTarget, "Command not found")
                return

            str = "Command '%s' sent by '%s!%s@%s' via channel '%s' was found." % (fromCommand, fromNickname, fromIdent, fromHostname, fromTarget)
            print(str)
            self.logger.log(str)
            function(fromTarget, fromMessage)

        if function is None:
            return

    def action(self, user, channel, msg):
        user = user.split('!', 1)[0]
        self.logger.log("* %s %s" % (user, msg))

    def noticed(self, user, channel, msg):
        if msg == "Password accepted - you are now recognized." and user == "NickServ!services@services.":
            str = "Successfully identified with NickServ."
            print(str)
            self.logger.log(str)

    def irc_NICK(self, prefix, params):
        old_nick = prefix.split('!')[0]
        new_nick = params[0]
        self.logger.log("'%s' is now known as '%s'" % (old_nick, new_nick))

    def alterCollidedNick(self, nickname):
        return nickname + '_'


class ServiceXFactory(protocol.ClientFactory):
    def __init__(self, filename):
        self.filename = filename

    def buildProtocol(self, addr):
        p = ServiceXProtocol()
        p.factory = self
        return p

    def clientConnectionLost(self, connector, reason):
        connector.connect()

    def clientConnectionFailed(self, connector, reason):
        print("connection failed:", reason)
        reactor.stop()


if __name__ == '__main__':
    log.startLogging(stdout)
    factory = ServiceXFactory("servicex.log")
    reactor.connectTCP("irc.poulskitchen.club", 6667, factory)
    reactor.run()
